services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PG_USER:-fiend}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-1a6n4g3e5l1a}
      POSTGRES_DB: ${PG_DB:-caseload}
    ports:
      - "${PG_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-fiend} -d ${PG_DB:-caseload}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - justice-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis Master for caching and queue processing
  redis-master:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_MASTER_PORT:-6379}:6379"
    volumes:
      - redis_master_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - justice-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    command: redis-server --save 20 1 --loglevel warning

  # Redis Slave 1
  redis-slave1:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_SLAVE1_PORT:-6380}:6379"
    volumes:
      - redis_slave1_data:/data
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - justice-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    command: redis-server --slaveof redis-master 6379 --save 20 1 --loglevel warning

  # Redis Sentinel 1
  redis-sentinel1:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_SENTINEL1_PORT:-26379}:26379"
    volumes:
      - redis_sentinel1_data:/data
    depends_on:
      - redis-master
      - redis-slave1
    networks:
      - justice-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    command: >
      redis-sentinel /etc/redis/sentinel.conf
    configs:
      - source: redis-sentinel-config
        target: /etc/redis/sentinel.conf

  # Redis Sentinel 2 (for HA)
  redis-sentinel2:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_SENTINEL2_PORT:-26380}:26379"
    volumes:
      - redis_sentinel2_data:/data
    depends_on:
      - redis-master
      - redis-slave1
    networks:
      - justice-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    command: >
      redis-sentinel /etc/redis/sentinel.conf
    configs:
      - source: redis-sentinel-config
        target: /etc/redis/sentinel.conf

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - redis-master
      - redis-slave1
      - redis-sentinel1
      - redis-sentinel2
    networks:
      - justice-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: justice_caseload_app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      DATABASE_URL: postgresql://${PG_USER:-fiend}:${PG_PASSWORD:-1a6n4g3e5l1a}@database:5432/${PG_DB:-caseload}?sslmode=disable&connect_timeout=10&pool_timeout=10&socket_timeout=10
      REDIS_URL: redis://redis:6379
      REDIS_CLUSTER_ENABLED: 'true'
      REDIS_CLUSTER_MODE: sentinel
      REDIS_SENTINEL_MASTER_NAME: mymaster
      REDIS_SENTINEL_HOSTS: redis-sentinel1:26379,redis-sentinel2:26379
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
    depends_on:
      database:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      redis-slave1:
        condition: service_healthy
      redis-sentinel1:
        condition: service_started
      redis-sentinel2:
        condition: service_started
      prometheus:
        condition: service_started
    networks:
      - justice-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Run migrations on startup
    command: >
      sh -c "
        npx prisma migrate deploy &&
        node server.js
      "

configs:
  redis-sentinel-config:
    file: ./monitoring/redis-sentinel.conf

volumes:
  postgres_data:
    driver: local
  redis_master_data:
    driver: local
  redis_slave1_data:
    driver: local
  redis_sentinel1_data:
    driver: local
  redis_sentinel2_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  justice-network:
    driver: bridge
