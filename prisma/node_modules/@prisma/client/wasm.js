
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CourtScalarFieldEnum = {
  id: 'id',
  courtName: 'courtName',
  courtCode: 'courtCode',
  courtType: 'courtType',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  originalCode: 'originalCode',
  originalNumber: 'originalNumber',
  originalYear: 'originalYear'
};

exports.Prisma.JudgeScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  firstName: 'firstName',
  lastName: 'lastName',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaseTypeScalarFieldEnum = {
  id: 'id',
  caseTypeName: 'caseTypeName',
  caseTypeCode: 'caseTypeCode',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.CaseScalarFieldEnum = {
  id: 'id',
  caseNumber: 'caseNumber',
  courtName: 'courtName',
  caseTypeId: 'caseTypeId',
  filedDate: 'filedDate',
  originalCourtId: 'originalCourtId',
  originalCaseNumber: 'originalCaseNumber',
  originalYear: 'originalYear',
  parties: 'parties',
  status: 'status',
  caseAgeDays: 'caseAgeDays',
  lastActivityDate: 'lastActivityDate',
  totalActivities: 'totalActivities',
  hasLegalRepresentation: 'hasLegalRepresentation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  caseidType: 'caseidType',
  caseidNo: 'caseidNo',
  maleApplicant: 'maleApplicant',
  femaleApplicant: 'femaleApplicant',
  organizationApplicant: 'organizationApplicant',
  maleDefendant: 'maleDefendant',
  femaleDefendant: 'femaleDefendant',
  organizationDefendant: 'organizationDefendant'
};

exports.Prisma.CaseActivityScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  activityDate: 'activityDate',
  activityType: 'activityType',
  outcome: 'outcome',
  reasonForAdjournment: 'reasonForAdjournment',
  nextHearingDate: 'nextHearingDate',
  primaryJudgeId: 'primaryJudgeId',
  hasLegalRepresentation: 'hasLegalRepresentation',
  applicantWitnesses: 'applicantWitnesses',
  defendantWitnesses: 'defendantWitnesses',
  custodyStatus: 'custodyStatus',
  details: 'details',
  importBatchId: 'importBatchId',
  createdAt: 'createdAt',
  judge1: 'judge1',
  judge2: 'judge2',
  judge3: 'judge3',
  judge4: 'judge4',
  judge5: 'judge5',
  judge6: 'judge6',
  judge7: 'judge7',
  comingFor: 'comingFor',
  legalRepString: 'legalRepString',
  custodyNumeric: 'custodyNumeric',
  otherDetails: 'otherDetails'
};

exports.Prisma.CaseJudgeAssignmentScalarFieldEnum = {
  caseId: 'caseId',
  judgeId: 'judgeId',
  assignedAt: 'assignedAt',
  isPrimary: 'isPrimary'
};

exports.Prisma.DailyImportBatchScalarFieldEnum = {
  id: 'id',
  importDate: 'importDate',
  filename: 'filename',
  fileSize: 'fileSize',
  fileChecksum: 'fileChecksum',
  totalRecords: 'totalRecords',
  successfulRecords: 'successfulRecords',
  failedRecords: 'failedRecords',
  errorLogs: 'errorLogs',
  status: 'status',
  estimatedCompletionTime: 'estimatedCompletionTime',
  processingStartTime: 'processingStartTime',
  userConfig: 'userConfig',
  validationWarnings: 'validationWarnings',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  createdBy: 'createdBy'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImportProgressScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  progressPercentage: 'progressPercentage',
  currentStep: 'currentStep',
  message: 'message',
  recordsProcessed: 'recordsProcessed',
  totalRecords: 'totalRecords',
  errorsCount: 'errorsCount',
  warningsCount: 'warningsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImportErrorDetailScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  rowNumber: 'rowNumber',
  columnName: 'columnName',
  errorType: 'errorType',
  errorMessage: 'errorMessage',
  rawValue: 'rawValue',
  suggestedFix: 'suggestedFix',
  severity: 'severity',
  isResolved: 'isResolved',
  createdAt: 'createdAt'
};

exports.Prisma.ImportSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  status: 'status',
  startedAt: 'startedAt',
  lastActivity: 'lastActivity',
  expiresAt: 'expiresAt',
  metadata: 'metadata'
};

exports.Prisma.ValidationResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  filename: 'filename',
  fileChecksum: 'fileChecksum',
  validationStatus: 'validationStatus',
  totalRows: 'totalRows',
  validRows: 'validRows',
  invalidRows: 'invalidRows',
  errors: 'errors',
  warnings: 'warnings',
  previewData: 'previewData',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Court: 'Court',
  Judge: 'Judge',
  CaseType: 'CaseType',
  Case: 'Case',
  CaseActivity: 'CaseActivity',
  CaseJudgeAssignment: 'CaseJudgeAssignment',
  DailyImportBatch: 'DailyImportBatch',
  User: 'User',
  ImportProgress: 'ImportProgress',
  ImportErrorDetail: 'ImportErrorDetail',
  ImportSession: 'ImportSession',
  ValidationResult: 'ValidationResult'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
