generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Court {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  courtName String    @map("court_name") @db.VarChar(255)
  courtCode String    @unique @map("court_code") @db.VarChar(50)
  courtType CourtType @map("court_type")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  cases     Case[]    @relation("OriginalCourt")

  @@index([courtType, isActive])
  @@index([courtName])
  @@index([courtCode])
  @@map("courts")
}

model Judge {
  id              String                @id @default(uuid())
  fullName        String                @map("full_name") @db.VarChar(255)
  firstName       String                @map("first_name") @db.VarChar(100)
  lastName        String                @map("last_name") @db.VarChar(100)
  isActive        Boolean               @default(true) @map("is_active")
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  caseActivities  CaseActivity[]        @relation("PrimaryJudge")
  caseAssignments CaseJudgeAssignment[]

  @@index([fullName])
  @@index([firstName, lastName])
  @@index([isActive])
  @@map("judges")
}

model CaseType {
  id           String   @id @default(uuid())
  caseTypeName String   @map("case_type_name") @db.VarChar(100)
  caseTypeCode String   @unique @map("case_type_code") @db.VarChar(20)
  description  String?
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  cases        Case[]

  @@index([caseTypeName])
  @@index([isActive])
  @@map("case_types")
}

model Case {
  id                     String                @id @default(uuid())
  caseNumber             String                @map("case_number") @db.VarChar(50)
  courtName              String                @map("court_name") @db.VarChar(255)
  caseTypeId             String                @map("case_type_id")
  filedDate              DateTime              @map("filed_date") @db.Date
  originalCourtId        String?               @map("original_court_id")
  originalCaseNumber     String?               @map("original_case_number") @db.VarChar(50)
  originalYear           Int?                  @map("original_year")
  parties                Json
  status                 CaseStatus            @default(ACTIVE)
  caseAgeDays            Int                   @default(0) @map("case_age_days")
  lastActivityDate       DateTime?             @map("last_activity_date")
  totalActivities        Int                   @default(0) @map("total_activities")
  hasLegalRepresentation Boolean               @default(false) @map("has_legal_representation")
  createdAt              DateTime              @default(now()) @map("created_at")
  updatedAt              DateTime              @updatedAt @map("updated_at")
  caseidType             String?               @map("caseid_type") @db.VarChar(20)
  caseidNo               String?               @map("caseid_no") @db.VarChar(50)
  maleApplicant          Int?                  @default(0) @map("male_applicant")
  femaleApplicant        Int?                  @default(0) @map("female_applicant")
  organizationApplicant  Int?                  @default(0) @map("organization_applicant")
  maleDefendant          Int?                  @default(0) @map("male_defendant")
  femaleDefendant        Int?                  @default(0) @map("female_defendant")
  organizationDefendant  Int?                  @default(0) @map("organization_defendant")
  activities             CaseActivity[]
  judgeAssignments       CaseJudgeAssignment[]
  caseType               CaseType              @relation(fields: [caseTypeId], references: [id])
  originalCourt          Court?                @relation("OriginalCourt", fields: [originalCourtId], references: [id], onUpdate: NoAction)

  @@unique([caseNumber, courtName], name: "case_number_court_unique")
  @@index([status, filedDate(sort: Desc)])
  @@index([caseTypeId, filedDate(sort: Desc)])
  @@index([filedDate(sort: Desc)])
  @@index([caseNumber])
  @@index([courtName])
  @@index([status])
  @@index([caseAgeDays])
  @@index([lastActivityDate(sort: Desc)])
  @@index([maleApplicant])
  @@index([femaleApplicant])
  @@index([maleDefendant])
  @@index([femaleDefendant])
  @@index([organizationApplicant])
  @@index([organizationDefendant])
  @@map("cases")
}

model CaseActivity {
  id                     String           @id @default(uuid())
  caseId                 String           @map("case_id")
  activityDate           DateTime         @map("activity_date") @db.Date
  activityType           String           @map("activity_type") @db.VarChar(100)
  outcome                String           @db.VarChar(100)
  reasonForAdjournment   String?          @map("reason_for_adjournment")
  nextHearingDate        DateTime?        @map("next_hearing_date") @db.Date
  primaryJudgeId         String           @map("primary_judge_id")
  hasLegalRepresentation Boolean          @map("has_legal_representation")
  applicantWitnesses     Int              @default(0) @map("applicant_witnesses")
  defendantWitnesses     Int              @default(0) @map("defendant_witnesses")
  custodyStatus          CustodyStatus    @map("custody_status")
  details                String?
  importBatchId          String           @map("import_batch_id")
  createdAt              DateTime         @default(now()) @map("created_at")
  judge1                 String?          @map("judge_1") @db.VarChar(255)
  judge2                 String?          @map("judge_2") @db.VarChar(255)
  judge3                 String?          @map("judge_3") @db.VarChar(255)
  judge4                 String?          @map("judge_4") @db.VarChar(255)
  judge5                 String?          @map("judge_5") @db.VarChar(255)
  judge6                 String?          @map("judge_6") @db.VarChar(255)
  judge7                 String?          @map("judge_7") @db.VarChar(255)
  comingFor              String?          @map("coming_for") @db.VarChar(100)
  legalRepString         String?          @map("legal_rep_string") @db.VarChar(10)
  custodyNumeric         Int?             @map("custody_numeric")
  otherDetails           String?          @map("other_details")
  case                   Case             @relation(fields: [caseId], references: [id], onDelete: Cascade)
  importBatch            DailyImportBatch @relation(fields: [importBatchId], references: [id])
  primaryJudge           Judge            @relation("PrimaryJudge", fields: [primaryJudgeId], references: [id])

  @@index([caseId, activityDate(sort: Desc)])
  @@index([activityDate(sort: Desc)])
  @@index([primaryJudgeId, activityDate(sort: Desc)])
  @@index([outcome, activityDate(sort: Desc)])
  @@index([activityType])
  @@index([importBatchId])
  @@index([custodyStatus])
  @@index([comingFor])
  @@index([legalRepString])
  @@index([custodyNumeric])
  @@index([judge2], map: "case_activities_judge2_idx")
  @@index([judge3], map: "case_activities_judge3_idx")
  @@index([judge4], map: "case_activities_judge4_idx")
  @@index([judge5], map: "case_activities_judge5_idx")
  @@index([judge6], map: "case_activities_judge6_idx")
  @@index([judge7], map: "case_activities_judge7_idx")
  @@map("case_activities")
}

model CaseJudgeAssignment {
  caseId     String   @map("case_id")
  judgeId    String   @map("judge_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  isPrimary  Boolean  @default(false) @map("is_primary")
  case       Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  judge      Judge    @relation(fields: [judgeId], references: [id])

  @@id([caseId, judgeId])
  @@index([caseId])
  @@index([judgeId])
  @@index([isPrimary])
  @@map("case_judge_assignments")
}

model DailyImportBatch {
  id                      String              @id @default(uuid())
  importDate              DateTime            @map("import_date") @db.Date
  filename                String              @db.VarChar(255)
  fileSize                Int                 @map("file_size")
  fileChecksum            String              @map("file_checksum") @db.VarChar(64)
  totalRecords            Int                 @map("total_records")
  successfulRecords       Int                 @map("successful_records")
  failedRecords           Int                 @map("failed_records")
  errorLogs               Json                @map("error_logs")
  status                  ImportStatus
  createdAt               DateTime            @default(now()) @map("created_at")
  completedAt             DateTime?           @map("completed_at")
  createdBy               String              @map("created_by")
  estimatedCompletionTime DateTime?           @map("estimated_completion_time")
  processingStartTime     DateTime?           @map("processing_start_time")
  userConfig              Json                @default("{}") @map("user_config")
  validationWarnings      Json                @default("[]") @map("validation_warnings")
  emptyRowsSkipped        Int?                @default(0) @map("empty_rows_skipped")
  activities              CaseActivity[]
  user                    User                @relation(fields: [createdBy], references: [id])
  errorDetails            ImportErrorDetail[]

  @@index([importDate(sort: Desc)])
  @@index([status])
  @@index([createdBy])
  @@index([filename])
  @@map("daily_import_batches")
}

model User {
  id            String             @id @default(uuid())
  email         String             @unique @db.VarChar(255)
  name          String             @db.VarChar(255)
  role          UserRole           @default(DATA_ENTRY)
  isActive      Boolean            @default(true) @map("is_active")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  importBatches DailyImportBatch[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model ImportErrorDetail {
  id           String           @id @default(uuid())
  batchId      String
  rowNumber    Int
  errorType    String           @db.VarChar(100)
  errorMessage String
  severity     ErrorSeverity
  createdAt    DateTime         @default(now())
  batch        DailyImportBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([rowNumber])
  @@index([severity])
  @@map("import_error_details")
}

enum CourtType {
  SC
  ELC
  ELRC
  KC
  SCC
  COA
  MC
  HC
  TC

  @@map("CourtType")
}

enum CaseStatus {
  ACTIVE
  RESOLVED
  PENDING
  TRANSFERRED
  DELETED

  @@map("case_status")
}

enum CustodyStatus {
  IN_CUSTODY
  ON_BAIL
  NOT_APPLICABLE

  @@map("custody_status")
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED

  @@map("import_status")
}

enum UserRole {
  ADMIN
  DATA_ENTRY
  VIEWER

  @@map("user_role")
}

enum ErrorSeverity {
  ERROR
  WARNING
  INFO

  @@map("error_severity")
}
